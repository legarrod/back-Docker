pipeline {
    agent any
    
    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['development', 'staging', 'production'],
            description: 'Environment to deploy to'
        )
        booleanParam(
            name: 'RESTART_CONTAINERS',
            defaultValue: true,
            description: 'Restart containers after build'
        )
    }
    
    triggers {
        pollSCM('H/2 * * * *')
        githubPush()
    }
    
    environment {
        DOCKER_IMAGE = 'backend-app'
        FRONTEND_IMAGE = 'frontend-app'
        BUILD_NUMBER = "${env.BUILD_NUMBER}"
        NODE_ENV = "${params.ENVIRONMENT ?: 'development'}"
        DOCKER_TAG = "build-${BUILD_NUMBER}"
        ENVIRONMENT = "${params.ENVIRONMENT ?: 'development'}"
        COMPOSE_FILE = 'docker-compose.yml'
    }
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
    }
    
    stages {
        stage('Cleanup Workspace') {
            steps {
                echo 'Limpiando workspace...'
                deleteDir()
            }
        }
        
        stage('Checkout') {
            steps {
                script {
                    echo "Haciendo checkout del código..."
                    
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/main']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [
                            [$class: 'CleanBeforeCheckout'],
                            [$class: 'PruneStaleBranch'],
                            [$class: 'CleanCheckout']
                        ],
                        submoduleCfg: [],
                        userRemoteConfigs: [[
                            credentialsId: 'github-token',
                            url: 'https://github.com/tu-usuario/tu-repo.git'
                        ]]
                    ])
                    
                    sh '''
                        echo "=== Información del repositorio ==="
                        git log --oneline -5
                        echo "=== Commit actual ==="
                        git rev-parse HEAD
                        echo "=== Verificando archivos ==="
                        ls -la
                        echo "=== Docker Compose presente ==="
                        ls -la docker-compose.yml || echo "docker-compose.yml no encontrado"
                    '''
                }
            }
        }
        
        stage('Stop Current Containers') {
            when {
                expression { return params.RESTART_CONTAINERS }
            }
            steps {
                script {
                    echo "Deteniendo contenedores actuales..."
                    sh '''
                        # Detener contenedores de la aplicación (mantener DB y Jenkins)
                        docker-compose stop frontend node-app test-runner || true
                        
                        # Remover contenedores antiguos
                        docker-compose rm -f frontend node-app test-runner || true
                        
                        echo "Contenedores detenidos"
                    '''
                }
            }
        }
        
        stage('Build Images') {
            steps {
                script {
                    echo "Construyendo imágenes Docker..."
                    
                    // Construir backend
                    echo "Construyendo imagen backend..."
                    dir('back-Docker') {
                        sh '''
                            docker build --no-cache \
                                --build-arg NODE_ENV=${NODE_ENV} \
                                --build-arg BUILD_NUMBER=${BUILD_NUMBER} \
                                -t ${DOCKER_IMAGE}:${DOCKER_TAG} \
                                -t ${DOCKER_IMAGE}:latest .
                        '''
                    }
                    
                    // Construir frontend
                    echo "Construyendo imagen frontend..."
                    dir('front-Docker') {
                        sh '''
                            docker build --no-cache \
                                --build-arg BUILD_NUMBER=${BUILD_NUMBER} \
                                -t ${FRONTEND_IMAGE}:${DOCKER_TAG} \
                                -t ${FRONTEND_IMAGE}:latest .
                        '''
                    }
                    
                    echo "Imágenes construidas exitosamente"
                }
            }
        }
        
        stage('Test') {
            steps {
                script {
                    echo "Ejecutando tests..."
                    
                    // Ejecutar tests en contenedor temporal
                    sh '''
                        docker run --rm \
                            --network app-network \
                            -e DB_HOST=db \
                            -e DB_PORT=5432 \
                            -e DB_USER=postgres \
                            -e DB_PASSWORD=example \
                            -e DB_NAME=mydb \
                            ${DOCKER_IMAGE}:${DOCKER_TAG} \
                            npm test
                    '''
                }
            }
        }
        
        stage('Deploy to Development') {
            when {
                anyOf {
                    expression { return params.ENVIRONMENT == 'development' }
                    expression { return params.ENVIRONMENT == null }
                }
            }
            steps {
                script {
                    echo "Desplegando a desarrollo..."
                    
                    sh '''
                        echo "=== Iniciando despliegue ==="
                        
                        # Asegurar que la red existe
                        docker network create app-network || true
                        
                        # Iniciar base de datos si no está corriendo
                        docker-compose up -d db
                        
                        # Esperar a que la BD esté lista
                        echo "Esperando base de datos..."
                        sleep 10
                        
                        # Iniciar contenedores de aplicación con nuevas imágenes
                        docker-compose up -d node-app
                        
                        # Esperar a que el backend esté listo
                        echo "Esperando backend..."
                        sleep 15
                        
                        # Iniciar frontend
                        docker-compose up -d frontend
                        
                        echo "=== Verificando estado de contenedores ==="
                        docker-compose ps
                        
                        echo "=== Verificando logs del backend ==="
                        docker-compose logs --tail=20 node-app
                        
                        echo "=== Verificando logs del frontend ==="
                        docker-compose logs --tail=20 frontend
                        
                        echo "Despliegue completado!"
                    '''
                }
            }
        }
        
        stage('Deploy to Environment') {
            when {
                anyOf {
                    expression { return params.ENVIRONMENT == 'staging' }
                    expression { return params.ENVIRONMENT == 'production' }
                }
            }
            steps {
                echo "Deploying to ${params.ENVIRONMENT}..."
                script {
                    if (params.ENVIRONMENT == 'production') {
                        input message: 'Deploy to production?', ok: 'Deploy'
                    }
                    
                    sh '''
                        echo "Deploying ${DOCKER_IMAGE}:${DOCKER_TAG} to ${ENVIRONMENT}"
                        
                        # Aquí puedes agregar lógica específica para staging/production
                        # Por ejemplo, usar un docker-compose diferente
                        
                        echo "Deployment to ${ENVIRONMENT} completed!"
                    '''
                }
            }
        }
        
        stage('Health Check') {
            steps {
                script {
                    echo "Verificando salud de la aplicación..."
                    
                    sh '''
                        echo "=== Verificando contenedores ==="
                        docker-compose ps
                        
                        echo "=== Verificando puertos ==="
                        netstat -tlnp | grep -E ":3000|:4200" || true
                        
                        echo "=== Test de conectividad backend ==="
                        curl -f http://localhost:3000/health || curl -f http://localhost:3000/ || echo "Backend no responde"
                        
                        echo "=== Test de conectividad frontend ==="
                        curl -f http://localhost:4200/ || echo "Frontend no responde"
                        
                        echo "Health check completado"
                    '''
                }
            }
        }
    }
    
    post {
        always {
            sh '''
                echo "=== Estado final de contenedores ==="
                docker-compose ps
                
                echo "=== Limpiando imágenes no utilizadas ==="
                docker image prune -f
                
                echo "=== Información del build ==="
                echo "Build: ${BUILD_NUMBER}"
                echo "Commit: ${GIT_COMMIT}"
                echo "Environment: ${ENVIRONMENT}"
            '''
        }
        
        success {
            echo '''
                ✅ Pipeline completado exitosamente!
                🚀 Aplicación desplegada y funcionando
                🌐 Frontend: http://localhost:4200
                🔧 Backend: http://localhost:3000
            '''
        }
        
        failure {
            echo '''
                ❌ Pipeline falló!
                📋 Revisa los logs para más detalles
            '''
            
            // Mostrar logs de contenedores en caso de fallo
            sh '''
                echo "=== Logs de contenedores en caso de fallo ==="
                docker-compose logs --tail=50 node-app || true
                docker-compose logs --tail=50 frontend || true
            '''
        }
    }
}