pipeline {
    agent any
    
    parameters {
        string(name: 'DOCKER_TAG', defaultValue: 'latest', description: 'Docker tag for the image')
        choice(name: 'ENVIRONMENT', choices: ['development', 'staging', 'production'], description: 'Deployment environment')
        booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Skip unit tests')
        booleanParam(name: 'SKIP_INTEGRATION_TESTS', defaultValue: false, description: 'Skip integration tests')
        booleanParam(name: 'FORCE_DEPLOY', defaultValue: false, description: 'Force deployment even if tests fail')
    }
    
    tools {
        nodejs 'NodeJS-18'
    }
    
    environment {
        DOCKER_IMAGE = "backend-app"
        DOCKER_TAG = "${params.DOCKER_TAG}"
        NODE_ENV = "${params.ENVIRONMENT}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo "Cleaning workspace and checking out code..."
                deleteDir() // Limpia completamente el workspace
                checkout scm
            }
        }
        
        stage('Environment Info') {
            steps {
                echo "Environment Information"
                sh '''
                    echo "Node version: $(node --version)"
                    echo "NPM version: $(npm --version)"
                    echo "Docker version: $(docker --version)"
                    echo "Environment: ${NODE_ENV}"
                    echo "Docker tag: ${DOCKER_TAG}"
                '''
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo "Installing dependencies..."
                sh '''
                    echo "Cleaning npm cache..."
                    npm cache clean --force
                    
                    echo "Removing existing node_modules and lock file..."
                    rm -rf node_modules package-lock.json
                    
                    echo "Installing dependencies..."
                    npm install
                    
                    echo "Dependencies installed successfully!"
                '''
            }
        }
        
        stage('Code Quality & Linting') {
            when {
                not {
                    expression { return params.SKIP_TESTS }
                }
            }
            steps {
                echo "Running code quality checks..."
                sh '''
                    if grep -q '"lint"' package.json; then
                        echo "Running linting..."
                        npm run lint || echo "Linting failed but continuing..."
                    else
                        echo "No lint script found, skipping..."
                    fi
                '''
            }
        }
        
        stage('Unit Tests') {
            when {
                not {
                    expression { return params.SKIP_TESTS }
                }
            }
            steps {
                echo "Running unit tests..."
                script {
                    sh '''
                        if grep -q '"test"' package.json; then
                            echo "Running tests..."
                            npm test || {
                                echo "Tests failed!"
                                if [ "${FORCE_DEPLOY}" = "true" ]; then
                                    echo "FORCE_DEPLOY is true, continuing despite test failures..."
                                else
                                    exit 1
                                fi
                            }
                        else
                            echo "No test script found, skipping tests..."
                        fi
                    '''
                }
            }
        }
        
        stage('Integration Tests') {
            when {
                allOf {
                    not {
                        expression { return params.SKIP_INTEGRATION_TESTS }
                    }
                    anyOf {
                        expression { return params.ENVIRONMENT == 'staging' }
                        expression { return params.ENVIRONMENT == 'production' }
                    }
                }
            }
            steps {
                echo "Running integration tests..."
                script {
                    sh '''
                        if grep -q '"test:integration"' package.json; then
                            echo "Running integration tests..."
                            npm run test:integration || {
                                echo "Integration tests failed!"
                                if [ "${FORCE_DEPLOY}" = "true" ]; then
                                    echo "FORCE_DEPLOY is true, continuing..."
                                else
                                    exit 1
                                fi
                            }
                        else
                            echo "No integration test script found, skipping..."
                        fi
                    '''
                }
            }
        }
        
        stage('Build Application') {
            steps {
                echo "Building application..."
                sh '''
                    if grep -q '"build"' package.json; then
                        echo "Building application..."
                        npm run build
                    else
                        echo "No build script found, skipping build step..."
                    fi
                '''
            }
        }
        
        stage('Docker Build') {
            steps {
                echo "Building Docker image..."
                sh '''
                    echo "Building Docker image: ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    docker build \
                        --build-arg NODE_ENV=${NODE_ENV} \
                        --build-arg BUILD_NUMBER=${BUILD_NUMBER} \
                        -t ${DOCKER_IMAGE}:${DOCKER_TAG} \
                        -t ${DOCKER_IMAGE}:build-${BUILD_NUMBER} \
                        .
                    
                    echo "Docker image built successfully!"
                    docker images | grep ${DOCKER_IMAGE}
                '''
            }
        }
        
        stage('Docker Test') {
            steps {
                echo "Testing Docker image..."
                sh '''
                    echo "Testing Docker container..."
                    docker run --rm ${DOCKER_IMAGE}:${DOCKER_TAG} echo "Container test successful!"
                    
                    if docker inspect ${DOCKER_IMAGE}:${DOCKER_TAG} | grep -q "Healthcheck"; then
                        echo "Running health check..."
                        docker run --rm -d --name test-container-${BUILD_NUMBER} ${DOCKER_IMAGE}:${DOCKER_TAG}
                        sleep 10
                        docker stop test-container-${BUILD_NUMBER} || true
                    fi
                '''
            }
        }
        
        stage('Deploy to Environment') {
            steps {
                echo "Deploying"
                sh '''
                    CONTAINER_NAME="node-backend"

                    echo "Creating network if not exists..."
                    docker network inspect app-network >/dev/null 2>&1 || docker network create app-network

                    echo "Stopping and removing previous container if exists..."
                    docker stop $CONTAINER_NAME || true
                    docker rm $CONTAINER_NAME || true

                    echo "Starting new container..."
                    docker run -d \
                        --name $CONTAINER_NAME \
                        -p 3000:3000 \
                        -v $(pwd)/back-Docker:/app \
                        -v /app/node_modules \
                        --network app-network \
                        -e DB_HOST=db \
                        -e DB_PORT=5432 \
                        -e DB_USER=postgres \
                        -e DB_PASSWORD=example \
                        -e DB_NAME=mydb \
                        ${DOCKER_IMAGE}:${DOCKER_TAG}

                    echo "Deployment completed!"
                '''
            }
        }

    }
    
    post {
        always {
            echo "Cleaning up..."
            sh '''
                OLD_IMAGES=$(docker images ${DOCKER_IMAGE} --format "{{.Tag}}" | grep "^build-" | sort -nr | tail -n +6 || echo "")
                if [ ! -z "$OLD_IMAGES" ]; then
                    echo "Removing old images: $OLD_IMAGES"
                    echo "$OLD_IMAGES" | xargs -I {} docker rmi ${DOCKER_IMAGE}:{} || true
                fi
            '''
        }
        
        success {
            echo "Pipeline completed successfully!"
            script {
                if (params.ENVIRONMENT == 'production') {
                    echo "Production deployment successful!"
                }
            }
        }
        
        failure {
            echo "Pipeline failed!"
        }
        
        unstable {
            echo "Pipeline completed with warnings"
        }
        
        cleanup {
            echo "Final cleanup..."
            sh 'docker system prune -f --volumes || true'
        }
    }
}
